"""
VK Teams Bot - –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VK Teams API
"""
import logging
import requests
import json
import time
from datetime import datetime
from typing import Optional, Dict, Any

from .config import Config
from .webhook_handler import WebhookHandler

logger = logging.getLogger(__name__)

class VKTeamsBot:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å VK Teams Bot API"""
    
    def __init__(self, webhook_handler: Optional[WebhookHandler] = None):
        self.token = Config.BOT_TOKEN
        self.api_url = Config.BOT_API_URL
        self.webhook_handler = webhook_handler
        self.last_event_id = 0
        self.session = requests.Session()
        self.bot_running = True
        self.active_chats = {}  # –°–ª–æ–≤–∞—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {chat_id: user_info}
        
    def get_events(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ long polling"""
        url = f"{self.api_url}/events/get"
        params = {
            'token': self.token,
            'lastEventId': self.last_event_id,
            'pollTime': Config.POLL_TIME
        }

        try:
            logger.debug(f"üì° –ó–∞–ø—Ä–æ—Å –∫ API: {url} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
            response = self.session.get(url, params=params, timeout=Config.POLL_TIME + 5)
            logger.debug(f"üì° –û—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status_code}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text[:500]}...")

            if response.status_code == 200:
                data = response.json()
                logger.debug(f"üìä –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è: {data}")
                return data
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
                return None

        except requests.exceptions.Timeout:
            logger.debug("‚è±Ô∏è –¢–∞–π–º–∞—É—Ç long polling (–Ω–æ—Ä–º–∞–ª—å–Ω–æ)")
            return None
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            return None
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}, –æ—Ç–≤–µ—Ç: {response.text}")
            return None

    def send_text(self, chat_id: str, text: str, inline_keyboard_markup: Optional[str] = None) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
        url = f"{self.api_url}/messages/sendText"
        data = {
            'token': self.token,
            'chatId': chat_id,
            'text': text
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞
        if inline_keyboard_markup:
            try:
                # –ü–∞—Ä—Å–∏–º JSON —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç
                keyboard_obj = json.loads(inline_keyboard_markup)
                
                # VK Teams –æ–∂–∏–¥–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –≤ –ø–æ–ª–µ inlineKeyboardMarkup
                if 'inlineKeyboard' in keyboard_obj:
                    data['inlineKeyboardMarkup'] = json.dumps(keyboard_obj['inlineKeyboard'])
                    logger.info(f"üîò –î–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏: {len(keyboard_obj['inlineKeyboard'])} —Ä—è–¥–æ–≤")
                    
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
                return False

        try:
            logger.debug(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: chat_id={chat_id}, text={text[:50]}{'...' if len(text) > 50 else ''}")

            # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º form data
            response = self.session.post(url, data=data)
            
            logger.debug(f"üì¨ –ü–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç API: —Å—Ç–∞—Ç—É—Å {response.status_code}, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ: {response.text}")

            if response.status_code == 200:
                try:
                    response_data = response.json()
                    if response_data.get('ok', False):
                        logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ{'—Å –∫–Ω–æ–ø–∫–∞–º–∏ ' if inline_keyboard_markup else ''}–£–°–ü–ï–®–ù–û –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id}")
                        return True
                    else:
                        logger.error(f"‚ùå API –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: {response_data}")
                        return False
                except json.JSONDecodeError:
                    logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–∞—Ä—Å–∏—Ç—å JSON –æ—Ç–≤–µ—Ç: {response.text}")
                    logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ —á–∞—Ç {chat_id} (—Å—Ç–∞—Ç—É—Å 200)")
                    return True
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: —Å—Ç–∞—Ç—É—Å {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text}")
                return False

        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
            return False

    def handle_message(self, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            payload = event.get('payload', {})
            chat = payload.get('chat', {})
            sender = payload.get('from', {})

            message_text = payload.get('text', '')
            chat_id = chat.get('chatId', '')
            user_name = f"{sender.get('firstName', '')} {sender.get('lastName', '')}"
            user_id = sender.get('userId', '')

            logger.info(f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name} –≤ —á–∞—Ç–µ {chat_id}: {message_text}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ
            self.active_chats[chat_id] = {
                'user_name': user_name.strip(),
                'user_id': user_id,
                'last_message_time': datetime.now().isoformat(),
                'message_count': self.active_chats.get(chat_id, {}).get('message_count', 0) + 1
            }

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤–Ω–µ—à–Ω–∏–π webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if self.webhook_handler:
                self.webhook_handler.send_to_n8n_webhook(event)

            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if not message_text:
                return

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
            if message_text == "/start":
                welcome_text = "–ü—Ä–∏–≤–µ—Ç! –Ø VK Teams –±–æ—Ç —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π N8N. –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—à–ª—é –≤ n8n."
                self.send_text(chat_id, welcome_text)

            elif message_text == "/help":
                help_text = (
                    "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                    "/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
                    "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                    "/status - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n\n"
                    "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–ø—Ä–∞–≤–ª—é –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ, –∞ —Ç–∞–∫–∂–µ –ø–µ—Ä–µ—à–ª—é –≤ n8n."
                )
                self.send_text(chat_id, help_text)
                
            elif message_text == "/status":
                status_text = (
                    f"ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞: –ê–∫—Ç–∏–≤–µ–Ω\n"
                    f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(self.active_chats)}\n"
                    f"üîó API URL: {Config.BOT_API_URL}\n"
                    f"üì° N8N Webhook: {'‚úÖ –ù–∞—Å—Ç—Ä–æ–µ–Ω' if Config.N8N_WEBHOOK_URL else '‚ùå –ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω'}"
                )
                self.send_text(chat_id, status_text)

            elif not message_text.startswith("/"):
                # –≠—Ö–æ-–æ—Ç–≤–µ—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
                echo_text = f"–≠—Ö–æ: {message_text}"
                self.send_text(chat_id, echo_text)

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def handle_callback_query(self, event: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        try:
            payload = event.get('payload', {})
            callback_data = payload.get('callbackData', '')
            
            chat = payload.get('message', {}).get('chat', {})
            chat_id = chat.get('chatId', '')
            
            sender = payload.get('from', {})
            user_name = f"{sender.get('firstName', '')} {sender.get('lastName', '')}"
            
            logger.info(f"üîò –ù–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –æ—Ç {user_name} –≤ —á–∞—Ç–µ {chat_id}: {callback_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ webhook (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω)
            if self.webhook_handler:
                self.webhook_handler.send_to_n8n_webhook(event)
            
            # –ü—Ä–æ—Å—Ç–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            self.send_text(chat_id, f"–í—ã –Ω–∞–∂–∞–ª–∏: {callback_data}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")

    def polling_loop(self):
        """–¶–∏–∫–ª long polling"""
        logger.info("üîÑ Long polling –∑–∞–ø—É—â–µ–Ω...")

        while self.bot_running:
            try:
                events = self.get_events()

                if events and 'events' in events:
                    logger.debug(f"üì® –ü–æ–ª—É—á–µ–Ω–æ {len(events['events'])} —Å–æ–±—ã—Ç–∏–π")
                    for event in events['events']:
                        event_id = event.get('eventId', 0)
                        event_type = event.get('type', '')

                        logger.debug(f"üéØ –°–æ–±—ã—Ç–∏–µ ID: {event_id}, –¢–∏–ø: {event_type}")

                        if event_id > self.last_event_id:
                            self.last_event_id = event_id

                        if event_type == 'newMessage':
                            logger.debug(f"üì© –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {event}")
                            self.handle_message(event)
                        elif event_type == 'callbackQuery':
                            logger.debug(f"üîò –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏: {event}")
                            self.handle_callback_query(event)
                        else:
                            logger.debug(f"‚è≠Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–±—ã—Ç–∏–µ —Ç–∏–ø–∞: {event_type}")

                time.sleep(1)

            except KeyboardInterrupt:
                logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ long polling.")
                self.bot_running = False
                break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ polling loop: {e}")
                time.sleep(5)

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞"""
        self.bot_running = False
        
    def get_active_chats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
        return self.active_chats.copy()
