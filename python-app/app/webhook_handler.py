"""
Webhook Handler - –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å N8N
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–µ–∑ –∏–∑–±—ã—Ç–æ—á–Ω–æ—Å—Ç–∏
"""
import logging
import requests
import json
from datetime import datetime
from typing import Dict, Any, List, Optional
from pydantic import BaseModel

from .config import Config

logger = logging.getLogger(__name__)

class IncomingWebhookMessage(BaseModel):
    """–ú–æ–¥–µ–ª—å –¥–ª—è –≤—Ö–æ–¥—è—â–µ–≥–æ webhook —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç N8N"""
    chat_id: str
    message: str
    message_type: str = "text"
    inline_keyboard_markup: Optional[Dict[str, Any]] = None  # JSON –æ–±—ä–µ–∫—Ç —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π VK Teams

class WebhookHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhooks –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å N8N"""
    
    def __init__(self):
        self.n8n_webhook_url = Config.N8N_WEBHOOK_URL
        self.session = requests.Session()
        self.stats = {
            'messages_sent_to_n8n': 0,
            'messages_received_from_n8n': 0,
            'last_n8n_send': None,
            'last_n8n_receive': None
        }
        
    def send_to_n8n_webhook(self, event_data: Dict[str, Any]) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ VK Teams –≤ N8N"""
        if not self.n8n_webhook_url:
            logger.debug("‚ö†Ô∏è N8N_WEBHOOK_URL –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É")
            return False

        try:
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è N8N
            payload = event_data.get('payload', {})
            event_type = event_data.get('type', 'new_message')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ä–µ–∞–ª—å–Ω—ã–π —Ç–∏–ø —Å–æ–±—ã—Ç–∏—è
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º chat_id –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–±—ã—Ç–∏—è
            if event_type == 'callbackQuery':
                chat_id = payload.get('message', {}).get('chat', {}).get('chatId', '')
            else:
                chat_id = payload.get('chat', {}).get('chatId', '')
            
            webhook_data = {
                "timestamp": datetime.now().isoformat(),
                "source": "vk_teams",
                "event_type": event_type,
                "data": {
                    "text": payload.get('text', ''),
                    "chat_id": chat_id,
                    "user_name": f"{payload.get('from', {}).get('firstName', '')} {payload.get('from', {}).get('lastName', '')}".strip(),
                    "user_id": payload.get('from', {}).get('userId', ''),
                    "timestamp": payload.get('timestamp', 0),
                    "msg_id": payload.get('msgId', ''),
                    "callback_data": payload.get('callbackData')  # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
                }
            }
            
            logger.info(f"‚û°Ô∏è –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ N8N: {self.n8n_webhook_url}")
            logger.debug(f"üì¶ –î–∞–Ω–Ω—ã–µ: {json.dumps(webhook_data, ensure_ascii=False, indent=2)[:200]}...")
            
            response = self.session.post(
                self.n8n_webhook_url, 
                json=webhook_data, 
                timeout=10,
                headers={'Content-Type': 'application/json'}
            )
            
            if response.status_code == 200:
                self.stats['messages_sent_to_n8n'] += 1
                self.stats['last_n8n_send'] = datetime.now().isoformat()
                logger.info(f"‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ N8N")
                return True
            else:
                logger.error(f"‚ùå N8N –≤–µ—Ä–Ω—É–ª –æ—à–∏–±–∫—É: —Å—Ç–∞—Ç—É—Å {response.status_code}, –æ—Ç–≤–µ—Ç: {response.text[:200]}...")
                return False
                
        except requests.exceptions.Timeout:
            logger.error("‚ùå –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ N8N")
            return False
        except requests.exceptions.RequestException as e:
            logger.error(f"‚ùå –°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ N8N: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ webhook: {e}")
            return False

    def process_incoming_webhook(self, message: IncomingWebhookMessage) -> Dict[str, Any]:
        """–û–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤—Ö–æ–¥—è—â–∏–π webhook –æ—Ç N8N"""
        try:
            logger.info(f"üì• –ü–æ–ª—É—á–µ–Ω webhook –æ—Ç N8N –¥–ª—è —á–∞—Ç–∞ {message.chat_id}: {message.message[:50]}...")
            
            self.stats['messages_received_from_n8n'] += 1
            self.stats['last_n8n_receive'] = datetime.now().isoformat()
            
            return {
                "status": "accepted",
                "chat_id": message.chat_id,
                "message": message.message,
                "message_type": message.message_type,
                "timestamp": datetime.now().isoformat(),
                "message_length": len(message.message)
            }
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ webhook: {e}")
            return {
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }

    def get_webhook_stats(self) -> Dict[str, Any]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É webhook –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏"""
        return {
            "n8n_webhook_configured": bool(self.n8n_webhook_url),
            "n8n_webhook_url": self.n8n_webhook_url if self.n8n_webhook_url else "Not configured",
            "webhook_handler_status": "active",
            "stats": self.stats.copy()
        }
